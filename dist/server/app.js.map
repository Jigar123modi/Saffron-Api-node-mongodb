{"version":3,"sources":["app.js"],"names":["Promise","require","https","fs","swaggerUi","moment","connect","mongo","uri","useMongoClient","connection","on","err","console","error","process","exit","app","log","__dirname","use","static","server","createServer","startServer","logInit","angularFullstack","listen","port","ip","get","writeLog","eLogLevel","info","currentTime","tz","format","currentDate","Date","exports","module"],"mappings":"AAAA;;;;AAIA;;;;;;;;;;AAEA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAZA,mBAASA,OAAT,GAAmBC,QAAQ,UAAR,CAAnB;;;AAcA;AACA,IAAIC,QAAQD,QAAQ,OAAR,CAAZ;AACA,MAAME,KAAKF,QAAQ,IAAR,CAAX;AACA,MAAMG,YAAYH,QAAQ,oBAAR,CAAlB;AACA,IAAII,SAASJ,QAAQ,iBAAR,CAAb;;AAEA;AACA;;;AAGA,mBAASK,OAAT,CAAiB,sBAAOC,KAAP,CAAaC,GAA9B,EAAmC,EAACC,gBAAgB,IAAjB,EAAnC;AACA,mBAASC,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAAUC,GAAV,EAAe;AAC3CC,YAAQC,KAAR,CAAe,6BAA4BF,GAAI,EAA/C;AACAG,YAAQC,IAAR,CAAa,CAAC,CAAd,EAF2C,CAEzB;AACrB,CAHD;;AAKA;;AAEA;AACA,IAAIC,MAAM,wBAAV;AACAJ,QAAQK,GAAR,CAAYC,SAAZ;AACAF,IAAIG,GAAJ,CAAQ,qBAAR;AACAH,IAAIG,GAAJ,CAAQ,SAAR,EAAmB,kBAAQC,MAAR,CAAeF,YAAY,SAA3B,CAAnB;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;AAMA;AACA,IAAIG,SAAS,eAAKC,YAAL,CAAkBN,GAAlB,CAAb;;AAEA,wBAAWK,MAAX;AACAT,QAAQK,GAAR,CAAY,wCAAZ;AACA,uBAAcD,GAAd;AACA,sBAAeA,GAAf;;AAEA;AACA,SAASO,WAAT,GAAuB;;AAEnB;AACA,kBAAIC,OAAJ;;AAEAR,QAAIS,gBAAJ,GAAuBJ,OAAOK,MAAP,CAAc,sBAAOC,IAArB,EAA2B,sBAAOC,EAAlC,kCAAsC,aAAiB;AAC1EhB,gBAAQK,GAAR,CAAY,4CAAZ,EAA0D,sBAAOU,IAAjE,EAAuEX,IAAIa,GAAJ,CAAQ,KAAR,CAAvE;AACA,sBAAIC,QAAJ,CAAa,cAAIC,SAAJ,CAAcC,IAA3B,EAAiC,iCAAiC,sBAAOL,IAAxC,GAA+C,OAA/C,GAAyDX,IAAIa,GAAJ,CAAQ,KAAR,CAAzD,GAA0E,OAA3G;AACA,YAAII,cAAc7B,OAAO8B,EAAP,CAAU,cAAV,EAA0BC,MAA1B,EAAlB;AACA,YAAIC,cAAc,IAAIC,IAAJ,CAASJ,WAAT,CAAlB;AACA,cAAM,0BAAcG,WAAd,CAAN;AACH,KANsB,EAAvB;AAOH;;AAGD,4BAAab,WAAb;;AAEA;AACAe,UAAUC,OAAOD,OAAP,GAAiBtB,GAA3B","file":"app.js","sourcesContent":["/**\r\n * Main application file\r\n */\r\n\r\n'use strict';\r\n\r\nimport express from 'express';\r\nimport mongoose from 'mongoose';\r\n\r\nmongoose.Promise = require('bluebird');\r\nimport config from './config/environment';\r\nimport Log from './config/Log';\r\nimport '../server/api/CronJob/index';\r\n\r\nimport http from 'http';\r\nimport cors from 'cors';\r\n\r\nimport expressConfig from './config/express';\r\nimport registerRoutes from './routes';\r\nimport seedDatabaseIfNeeded from './config/seed';\r\nimport {socketOpen} from '../server/api/Socket';\r\nimport {AddFirstOrder} from './api/CronJob/index';\r\n\r\n//const http2 = require('http2');\r\nlet https = require('https');\r\nconst fs = require('fs');\r\nconst swaggerUi = require('swagger-ui-express');\r\nlet moment = require('moment-timezone');\r\n\r\n//todo Swagger\r\n//const swaggerDocument = require('./swagger.json');\r\n\r\n\r\nmongoose.connect(config.mongo.uri, {useMongoClient: true});\r\nmongoose.connection.on('error', function (err) {\r\n    console.error(`MongoDB connection error: ${err}`);\r\n    process.exit(-1); // eslint-disable-line no-process-exit\r\n});\r\n\r\nseedDatabaseIfNeeded();\r\n\r\n// Setup server\r\nlet app = express();\r\nconsole.log(__dirname);\r\napp.use(cors());\r\napp.use('/images', express.static(__dirname + '/images'));\r\n\r\n//todo Swagger\r\n//app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));\r\n\r\n\r\n//var privateKey = fs.readFileSync('server-key.pem').toString();\r\n//var certificate = fs.readFileSync('server-crt.pem').toString();\r\n//var ca = fs.readFileSync('ca-crt.pem').toString();\r\n/*var credentials = {\r\n    key: privateKey, cert: certificate,\r\n    requestCert: false,\r\n    rejectUnauthorized: true\r\n};*/\r\n\r\n//let server = https.createServer(credentials, app);\r\nlet server = http.createServer(app);\r\n\r\nsocketOpen(server);\r\nconsole.log(\"socket connection successfully created\");\r\nexpressConfig(app);\r\nregisterRoutes(app);\r\n\r\n// Start server\r\nfunction startServer() {\r\n\r\n    new Log();\r\n    Log.logInit();\r\n\r\n    app.angularFullstack = server.listen(config.port, config.ip, async function() {\r\n        console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));\r\n        Log.writeLog(Log.eLogLevel.info, 'Express server listening on ' + config.port + ', in ' + app.get('env') + ' mode');\r\n        let currentTime = moment.tz('Asia/Kolkata').format();\r\n        let currentDate = new Date(currentTime);\r\n        await AddFirstOrder(currentDate);\r\n    });\r\n}\r\n\r\n\r\nsetImmediate(startServer);\r\n\r\n// Expose app\r\nexports = module.exports = app;\r\n"]}