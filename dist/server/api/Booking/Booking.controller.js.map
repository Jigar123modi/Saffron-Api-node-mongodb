{"version":3,"sources":["api/Booking/Booking.controller.js"],"names":["req","res","uniqueId","startTimeHours","body","startTime","hours","startTimeMinutes","minutes","endTimeHours","endTime","endTimeMinutes","bookingProduct","totalTime","allProductFound","userId","decoded","user","fullName","first_name","last_name","bookingStartDateTime","bookingEndDateTime","momentDateTime","moment","tz","format","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","NormalStartDateTime","NormalEndDateTime","totalPrice","not_acceptAble","requestObj","writeLog","eLogLevel","info","getHours","all","map","singleBookingProduct","TeamMemberProductSingle","getTeamMemberProductList","product_id","teamMember_id","ProductItem","getProduct","price","approxTime","message","status","json","getTime","_LastBooking","getLastBookingOrder","visited","lastBookingDateTimeCalculation","bookingEndTime","addMinute","setMinutes","getMinutes","toUTCString","currentTimeWithZeroMinutes","diffTime","Math","abs","diffMinutes","ceil","diffTimeActual","diffMinutesActual","findOneAndUpdate","timeSlotFull","$gte","$lte","$set","sort","exec","Error","BasketResponseGenerator","BasketGenerator","BookingAdd","id","customer_id","basket","basketResponse","teamWiseProductList","total","bookingDateTime","bookingStartTime","column","customerName","statusDateTime","save","then","InsertBooking","err","responseObject","productList","arrivalTime","_id","BookingItemsAdd","booking_id","team_id","active","InsertBookingItems","error","toString","publishMessage","data","paymentComplete","paymentMemberId","paymentMemberName","singleObject","orderPlace","index","bookingItem","productItem","productTeam","getTeam","object","push","teamMember","find","pushData","orderStatus","console","log","productId","listProductList","singleProduct","product","__v","description","sex","bookingValue","_LastBookingOrder","_LastBookingOrderAgain","teamId","teamList","singleTeam","team","role","password","block","teamMemberProductList","singleTeamMemberProduct","teamMemberProduct","startDayDateTime","startOf","endDayDateTime","endOf","NormalDateStartDateTime","NormalDateEndDateTime","runningOrder","runningLate","recentOrders","recentComplete","runningOrders","lateOrders","getBookingOrder","orderId","params","orderType","updateResult","update","nModified","n","sodPublishMessage","_singleLateBooking","findOne","forEach","singleTeamWiseProductList","result","updateBookingOrder","next","teamMemberId","currentTime","updateResultTeamMember","$ne","findResult","findResult1","findResult2","length","updateBookingEmployeeOrder","$elemMatch","getTeamMemberBookingOrder","require","_"],"mappings":"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","file":"Booking.controller.js","sourcesContent":["import Booking from './Booking.model';\r\nimport TeamMemberProduct from '../TeamMemberProduct/TeamMemberProduct.model';\r\nimport Product from '../Product/Product.model';\r\nimport BookingItems from '../BookingItems/BookingItems.model';\r\nimport Oauth from '../oauth/oauth.model';\r\n\r\nimport {jwtdata, errorJsonResponse, getGuid, setCache, getCache} from '../../config/commonHelper';\r\nimport {socketPublishMessage} from '../Socket/index';\r\nimport Log from '../../config/Log';\r\n\r\nlet moment = require('moment-timezone');\r\nlet _ = require('lodash');\r\n\r\n// New Booking\r\nexport async function index(req, res) {\r\n    let uniqueId = getGuid();\r\n    try {\r\n        let startTimeHours = req.body.startTime.hours;\r\n        let startTimeMinutes = req.body.startTime.minutes;\r\n        let endTimeHours = req.body.endTime.hours;\r\n        let endTimeMinutes = req.body.endTime.minutes;\r\n        let bookingProduct = req.body.bookingProduct;\r\n        let totalTime = 0;\r\n        let allProductFound = true;\r\n        let userId = req.decoded.user.userId;\r\n        let fullName = req.decoded.user.first_name + ' ' + req.decoded.user.last_name;\r\n        let bookingStartDateTime = '';\r\n        let bookingEndDateTime = '';\r\n        let momentDateTime = moment()\r\n            .tz('Asia/Kolkata')\r\n            .format();\r\n        let currentDate = new Date(momentDateTime);\r\n        let year = currentDate.getFullYear();\r\n        let month = currentDate.getMonth();\r\n        let date = currentDate.getDate();\r\n        let NormalStartDateTime = new Date(year, month, date, startTimeHours, startTimeMinutes, 0);\r\n        let NormalEndDateTime = new Date(year, month, date, endTimeHours, endTimeMinutes, 0);\r\n        let totalPrice = 0;\r\n        let not_acceptAble = false;\r\n\r\n        let requestObj = {\r\n            startTimeHours,\r\n            startTimeMinutes,\r\n            endTimeHours,\r\n            endTimeMinutes,\r\n            bookingProduct,\r\n            totalTime,\r\n            allProductFound,\r\n            userId,\r\n            fullName,\r\n            bookingStartDateTime,\r\n            bookingEndDateTime,\r\n            momentDateTime,\r\n            currentDate,\r\n            year,\r\n            month,\r\n            date,\r\n            NormalStartDateTime,\r\n            NormalEndDateTime,\r\n            totalPrice,\r\n            not_acceptAble,\r\n        };\r\n\r\n        Log.writeLog(Log.eLogLevel.info, '[POST:Bookings] : ' + JSON.stringify(requestObj), uniqueId);\r\n\r\n        if(currentDate.getHours() >= 7) {\r\n\r\n            //Calculate the total time\r\n            await Promise.all(bookingProduct.map(async(singleBookingProduct) => {\r\n\r\n                let TeamMemberProductSingle = await getTeamMemberProductList(singleBookingProduct.product_id, singleBookingProduct.teamMember_id, uniqueId);\r\n                let ProductItem = await getProduct(singleBookingProduct.product_id, uniqueId);\r\n\r\n                if(ProductItem !== null) {\r\n                    totalPrice += ProductItem.price;\r\n                } else {\r\n                    allProductFound = false;\r\n                }\r\n\r\n                if(TeamMemberProductSingle !== null) {\r\n                    totalTime += TeamMemberProductSingle.approxTime;\r\n                } else {\r\n                    allProductFound = false;\r\n                }\r\n\r\n            }));\r\n\r\n            if(!allProductFound) {\r\n                let message = 'your order has been canceled, so please restart your application and place the booking again. we are sorry for this trouble.';\r\n                Log.writeLog(Log.eLogLevel.info, '[POST:Bookings] : ' + JSON.stringify(errorJsonResponse(message, message)), uniqueId);\r\n                res.status(400)\r\n                    .json(errorJsonResponse(message, message));\r\n            } else {\r\n\r\n                //check currentTime and booking selected time.\r\n                if(currentDate.getTime() < NormalEndDateTime.getTime()) {\r\n\r\n                    //get LastBooking order\r\n                    let _LastBooking = await getLastBookingOrder(NormalStartDateTime, NormalEndDateTime, uniqueId);\r\n\r\n                    if(_LastBooking !== null && _LastBooking.visited === false) {\r\n\r\n                        //Get Booking LastTime\r\n                        let lastBookingDateTimeCalculation = moment.tz(_LastBooking.bookingEndTime, 'Asia/Kolkata')\r\n                            .format();\r\n                        let addMinute = new Date(lastBookingDateTimeCalculation);\r\n                        if(currentDate.getTime() < addMinute.getTime() && (_LastBooking.status !== 'finish')) {\r\n                            addMinute.setMinutes(addMinute.getMinutes() + totalTime);\r\n                            //set arrivalTime\r\n                            bookingStartDateTime = new Date(_LastBooking.bookingEndTime).toUTCString();\r\n                            //set order finish time.\r\n                            bookingEndDateTime = addMinute.toUTCString();\r\n                        } else {\r\n                            let currentTimeWithZeroMinutes = new Date(year, month, date, currentDate.getHours(), currentDate.getMinutes(), 0);\r\n                            bookingStartDateTime = currentTimeWithZeroMinutes.toUTCString();\r\n                            addMinute = currentTimeWithZeroMinutes;\r\n                            addMinute.setMinutes(currentTimeWithZeroMinutes.getMinutes() + totalTime);\r\n                            bookingEndDateTime = addMinute.toUTCString();\r\n                        }\r\n\r\n                        const diffTime = Math.abs(NormalEndDateTime.getTime() - addMinute.getTime());\r\n                        const diffMinutes = Math.ceil(diffTime / (1000 * 60));\r\n                        if(!((NormalEndDateTime.getTime() >= addMinute.getTime()) && diffMinutes >= 0)) {\r\n\r\n                            //check last order time and endTimeSlot time has less diff - 5\r\n                            addMinute = new Date(lastBookingDateTimeCalculation);\r\n                            const diffTimeActual = Math.abs(NormalEndDateTime.getTime() - addMinute.getTime());\r\n                            const diffMinutesActual = Math.ceil(diffTimeActual / (1000 * 60));\r\n\r\n                            if(diffMinutesActual > 5) {\r\n\r\n                                await Booking.findOneAndUpdate({\r\n                                    visited: true,\r\n                                    timeSlotFull: false,\r\n                                    bookingEndTime: {\r\n                                        $gte: NormalStartDateTime.toUTCString(),\r\n                                        $lte: NormalEndDateTime.toUTCString()\r\n                                    }\r\n                                }, {$set: {visited: false}}, {sort: {bookingEndTime: -1}})\r\n                                    .exec();\r\n\r\n                                throw new Error(`your selected time slot has been full for your order, you can remove some item from the basket and again place the order otherwise you can select another time slot for this order`);\r\n\r\n                            } else {\r\n\r\n                                await Booking.findOneAndUpdate({\r\n                                    visited: true,\r\n                                    timeSlotFull: false,\r\n                                    bookingEndTime: {\r\n                                        $gte: NormalStartDateTime.toUTCString(),\r\n                                        $lte: NormalEndDateTime.toUTCString()\r\n                                    }\r\n                                }, {$set: {timeSlotFull: true}}, {sort: {bookingEndTime: -1}})\r\n                                    .exec();\r\n\r\n                                throw new Error('your selected time slot has been full please select another time slot and please order again');\r\n\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        //Never execute this part.\r\n                        //first order set stating time and add minutes and generate end time\r\n                        if(currentDate.getTime() < NormalStartDateTime.getTime()) {\r\n                            bookingStartDateTime = NormalStartDateTime.toUTCString();\r\n                            let addMinute = NormalStartDateTime;\r\n                            addMinute.setMinutes(NormalStartDateTime.getMinutes() + totalTime);\r\n                            bookingEndDateTime = addMinute.toUTCString();\r\n                        } else {\r\n                            bookingStartDateTime = currentDate.toUTCString();\r\n                            let addMinute = currentDate;\r\n                            addMinute.setMinutes(currentDate.getMinutes() + totalTime);\r\n                            bookingEndDateTime = addMinute.toUTCString();\r\n                        }\r\n                    }\r\n\r\n                    if(!not_acceptAble) {\r\n\r\n                        //Generate the Basket Response.\r\n                        let BasketResponseGenerator = await BasketGenerator(bookingProduct, bookingStartDateTime, uniqueId);\r\n\r\n                        let BookingAdd = new Booking({\r\n                            id: getGuid(),\r\n                            customer_id: userId,\r\n                            basket: BasketResponseGenerator.basketResponse,\r\n                            teamWiseProductList: BasketResponseGenerator.teamWiseProductList,\r\n                            total: totalPrice,\r\n                            bookingDateTime: currentDate.toUTCString(),\r\n                            bookingStartTime: bookingStartDateTime,\r\n                            bookingEndTime: bookingEndDateTime,\r\n                            status: 'waiting',\r\n                            column: 'recent orders',\r\n                            customerName: fullName,\r\n                            visited: false,\r\n                            statusDateTime: bookingStartDateTime\r\n                        });\r\n                        BookingAdd.save()\r\n                            .then(async function(InsertBooking, err) {\r\n                                if(!err) {\r\n                                    if(InsertBooking) {\r\n                                        let responseObject = {\r\n                                            id: InsertBooking.id,\r\n                                            customer_id: InsertBooking.customer_id,\r\n                                            customerName: fullName,\r\n                                            productList: InsertBooking.basket,\r\n                                            total: InsertBooking.total,\r\n                                            bookingDateTime: moment.tz(InsertBooking.bookingDateTime, 'Asia/Kolkata')\r\n                                                .format(),\r\n                                            arrivalTime: moment.tz(InsertBooking.bookingStartTime, 'Asia/Kolkata')\r\n                                                .format(),\r\n                                            bookingEndTime: moment.tz(InsertBooking.bookingEndTime, 'Asia/Kolkata')\r\n                                                .format(),\r\n                                            status: InsertBooking.status,\r\n                                            column: InsertBooking.column,\r\n                                            statusDateTime: moment.tz(InsertBooking.statusDateTime, 'Asia/Kolkata')\r\n                                                .format(),\r\n                                            _id: InsertBooking._id\r\n                                        };\r\n\r\n                                        //ProductItemStore into BookingItem Collection.\r\n                                        await Promise.all(bookingProduct.map(async(singleBookingProduct) => {\r\n                                            let BookingItemsAdd = new BookingItems({\r\n                                                id: getGuid(),\r\n                                                booking_id: InsertBooking.id,\r\n                                                product_id: singleBookingProduct.product_id,\r\n                                                team_id: singleBookingProduct.teamMember_id,\r\n                                                active: true,\r\n                                            });\r\n                                            BookingItemsAdd.save()\r\n                                                .then(async function(InsertBookingItems, err) {\r\n                                                    if(!err) {\r\n                                                        if(!InsertBookingItems) {\r\n                                                            Log.writeLog(Log.eLogLevel.error, '[POST:Bookings] : ' + JSON.stringify(errorJsonResponse(err.toString(), 'Error in db BookingItems response')), uniqueId);\r\n                                                            res.status(400)\r\n                                                                .json(errorJsonResponse('Error in db BookingItems response', 'Error in db BookingItems response'));\r\n                                                        }\r\n                                                    } else {\r\n                                                        Log.writeLog(Log.eLogLevel.error, '[POST:Bookings] : ' + JSON.stringify(errorJsonResponse(err.toString(), 'Contact to your Developer')), uniqueId);\r\n                                                        res.status(400)\r\n                                                            .json(errorJsonResponse(err, 'Contact to your Developer'));\r\n                                                    }\r\n                                                });\r\n                                        }));\r\n\r\n                                        //ToDO send to SOD\r\n                                        let publishMessage = {\r\n                                            message: 'new order',\r\n                                            data: {\r\n                                                _id: InsertBooking._id,\r\n                                                id: InsertBooking.id,\r\n                                                customer_id: InsertBooking.customer_id,\r\n                                                customerName: fullName,\r\n                                                basket: InsertBooking.basket,\r\n                                                total: InsertBooking.total,\r\n                                                bookingDateTime: InsertBooking.bookingDateTime,\r\n                                                bookingStartTime: InsertBooking.bookingStartTime,\r\n                                                bookingEndTime: InsertBooking.bookingEndTime,\r\n                                                status: InsertBooking.status,\r\n                                                column: InsertBooking.column,\r\n                                                statusDateTime: InsertBooking.statusDateTime,\r\n                                                paymentComplete: InsertBooking.paymentComplete,\r\n                                                paymentMemberId: InsertBooking.paymentMemberId,\r\n                                                paymentMemberName: InsertBooking.paymentMemberName\r\n                                            }\r\n                                        };\r\n                                        await socketPublishMessage('SOD', publishMessage);\r\n\r\n                                        //ToDO send to TeamMember\r\n                                        BasketResponseGenerator.teamWiseProductList.map(async(singleObject) => {\r\n                                            let publishMessage = {\r\n                                                message: 'new order',\r\n                                                data: {\r\n                                                    _id: InsertBooking._id,\r\n                                                    id: InsertBooking.id,\r\n                                                    customer_id: InsertBooking.customer_id,\r\n                                                    customerName: fullName,\r\n                                                    teamWiseProductList: BasketResponseGenerator.teamWiseProductList,\r\n                                                    total: InsertBooking.total,\r\n                                                    bookingDateTime: InsertBooking.bookingDateTime,\r\n                                                    bookingStartTime: InsertBooking.bookingStartTime,\r\n                                                    bookingEndTime: InsertBooking.bookingEndTime,\r\n                                                    status: InsertBooking.status,\r\n                                                    column: InsertBooking.column,\r\n                                                    statusDateTime: InsertBooking.statusDateTime,\r\n                                                    paymentComplete: InsertBooking.paymentComplete,\r\n                                                    paymentMemberId: InsertBooking.paymentMemberId,\r\n                                                    paymentMemberName: InsertBooking.paymentMemberName\r\n                                                }\r\n                                            };\r\n                                            await socketPublishMessage(singleObject.id, publishMessage);\r\n                                        });\r\n\r\n                                        Log.writeLog(Log.eLogLevel.info, '[POST:Bookings] : ' + JSON.stringify({\r\n                                            totalTime,\r\n                                            orderPlace: responseObject\r\n                                        }), uniqueId);\r\n                                        res.status(200)\r\n                                            .json({totalTime, orderPlace: responseObject});\r\n\r\n                                    } else {\r\n                                        Log.writeLog(Log.eLogLevel.error, '[POST:Bookings] : ' + JSON.stringify(errorJsonResponse(InsertBooking, 'Error in db response')), uniqueId);\r\n                                        res.status(400)\r\n                                            .json(errorJsonResponse('Error in db response', 'Error in db response'));\r\n                                    }\r\n                                } else {\r\n                                    Log.writeLog(Log.eLogLevel.error, '[POST:Bookings] : ' + JSON.stringify(errorJsonResponse(err.toString(), 'Error in db response')), uniqueId);\r\n                                    res.status(400)\r\n                                        .json(errorJsonResponse(err, 'Contact to your Developer'));\r\n                                }\r\n                            });\r\n                    } else {\r\n\r\n                        Log.writeLog(Log.eLogLevel.error, '[POST:Bookings] : ' + JSON.stringify(errorJsonResponse('your order has not been Accepted, please select another time slot and book your order', 'your order has not been Accepted, please select another time slot and book your order')), uniqueId);\r\n                        res.status(406)\r\n                            .json(errorJsonResponse('your order has not been Accepted, please select another time slot and book your order', 'your order has not Accepted, please select another time slot and book your order'));\r\n\r\n                    }\r\n                } else {\r\n                    let message = 'you have selected wrong time, please choose the valid time slot.';\r\n                    Log.writeLog(Log.eLogLevel.error, '[POST:Bookings] : ' + JSON.stringify(errorJsonResponse(message, message)), uniqueId);\r\n                    res.status(400)\r\n                        .json(errorJsonResponse(message, message));\r\n                }\r\n            }\r\n\r\n        } else {\r\n            let message = 'Booking will be started at 7 am';\r\n            Log.writeLog(Log.eLogLevel.error, '[POST:Bookings] : ' + JSON.stringify(errorJsonResponse(message, message)), uniqueId);\r\n            res.status(400)\r\n                .json(errorJsonResponse(message, message));\r\n        }\r\n    } catch(error) {\r\n        Log.writeLog(Log.eLogLevel.error, '[POST:Bookings] : ' + JSON.stringify(errorJsonResponse(error.message.toString(), error.message.toString())), uniqueId);\r\n        res.status(400)\r\n            .json(errorJsonResponse(error.message.toString(), error.message.toString()));\r\n    }\r\n}\r\n\r\nasync function BasketGenerator(bookingProduct, bookingStartDateTime, uniqueId) {\r\n    try {\r\n\r\n        let basketResponse = [];\r\n        let teamWiseProductList = [];\r\n\r\n        await Promise.all(bookingProduct.map(async(bookingItem) => {\r\n\r\n            let productItem = await getProduct(bookingItem.product_id, uniqueId);\r\n            let productTeam = await getTeam(bookingItem.teamMember_id, uniqueId);\r\n\r\n            if(productItem && productTeam) {\r\n                let object = {\r\n                    productItem,\r\n                    productTeam\r\n                };\r\n                basketResponse.push(object);\r\n\r\n                let teamMember = teamWiseProductList.find((teamMember) => teamMember.id === productTeam.id);\r\n                if(!teamMember) {\r\n                    let pushData = {\r\n                        id: productTeam.id,\r\n                        productList: [],\r\n                        orderStatus: 'waiting',\r\n                        column: 'recent orders',\r\n                        statusDateTime: bookingStartDateTime,\r\n                        startTime: '',\r\n                        endTime: ''\r\n                    };\r\n                    pushData.productList.push(productItem);\r\n                    teamWiseProductList.push(pushData);\r\n                } else {\r\n                    teamMember.productList.push(productItem);\r\n                }\r\n            } else {\r\n                throw new Error('you have passed wrong id for basket generation');\r\n            }\r\n        }));\r\n\r\n        return {basketResponse, teamWiseProductList};\r\n\r\n    } catch(error) {\r\n        console.log(error);\r\n        Log.writeLog(Log.eLogLevel.error, '[BasketGenerator] : ' + JSON.stringify(errorJsonResponse(error.message.toString(), error.message.toString())), uniqueId);\r\n        throw new Error('you have passed wrong id for basket generation');\r\n    }\r\n}\r\n\r\nasync function getProduct(productId, uniqueId, index = 0) {\r\n    let listProductList = getCache('productList');\r\n    if (listProductList !== null) {\r\n        let singleProduct = listProductList.find((product) => product.id === productId);\r\n        if (singleProduct) {\r\n            return singleProduct;\r\n        } else {\r\n            if (index === 0) {\r\n                listProductList = await Product.find({}, {_id: 0, __v: 0, description: 0, date: 0, sex: 0, bookingValue: 0}).exec();\r\n                setCache('productList', listProductList);\r\n                return getProduct(productId, uniqueId, 1);\r\n            } else {\r\n                Log.writeLog(Log.eLogLevel.error, `[getProduct] : Product not found = ${productId}`, uniqueId);\r\n                return null;\r\n            }\r\n        }\r\n    } else {\r\n        listProductList = await Product.find({}, {_id: 0, __v: 0, description: 0, date: 0, sex: 0, bookingValue: 0}).exec();\r\n        setCache('productList', listProductList);\r\n        return getProduct(productId, uniqueId, 1);\r\n    }\r\n}\r\n\r\nasync function getLastBookingOrder(NormalStartDateTime, NormalEndDateTime, uniqueId) {\r\n\r\n    let _LastBookingOrder = await Booking.findOneAndUpdate({\r\n        visited: false,\r\n        bookingEndTime: {$gte: NormalStartDateTime.toUTCString(), $lte: NormalEndDateTime.toUTCString()}\r\n    }, {$set: {visited: true}}, {sort: {bookingEndTime: -1}})\r\n        .exec();\r\n\r\n    //Todo should not be received null value\r\n    if(_LastBookingOrder === null) {\r\n        Log.writeLog(Log.eLogLevel.error, '[getLastBookingOrder] : ' + JSON.stringify(errorJsonResponse(_LastBookingOrder, _LastBookingOrder)), uniqueId);\r\n\r\n        let _LastBookingOrderAgain = await Booking.findOneAndUpdate({\r\n            visited: true, timeSlotFull: true,\r\n            bookingEndTime: {$gte: NormalStartDateTime.toUTCString(), $lte: NormalEndDateTime.toUTCString()}\r\n        }, {sort: {bookingEndTime: -1}})\r\n            .exec();\r\n\r\n        if(_LastBookingOrderAgain) {\r\n            throw new Error('your selected time slot has been full please select another time slot and please order again');\r\n        } else {\r\n            return getLastBookingOrder(NormalStartDateTime, NormalEndDateTime, uniqueId);\r\n        }\r\n\r\n    } else if(_LastBookingOrder.visited === true) {\r\n        Log.writeLog(Log.eLogLevel.info, '[getLastBookingOrder-true] : ' + JSON.stringify(errorJsonResponse(_LastBookingOrder, _LastBookingOrder)), uniqueId);\r\n        return getLastBookingOrder(NormalStartDateTime, NormalEndDateTime, uniqueId);\r\n    } else {\r\n        Log.writeLog(Log.eLogLevel.info, '[getLastBookingOrder] : ' + JSON.stringify(errorJsonResponse(_LastBookingOrder, _LastBookingOrder)), uniqueId);\r\n        return _LastBookingOrder;\r\n    }\r\n}\r\n\r\nasync function getTeam(teamId, uniqueId, index = 0) {\r\n    let teamList = getCache('teamLists');\r\n    if (teamList !== null) {\r\n        let singleTeam = teamList.find((team) => team.id === teamId);\r\n        if (singleTeam) {\r\n            return singleTeam;\r\n        } else {\r\n            if (index === 0) {\r\n                teamList = await Oauth.find({role: 'employee'}, {\r\n                    _id: 0,\r\n                    __v: 0,\r\n                    description: 0,\r\n                    userId: 0,\r\n                    password: 0,\r\n                    role: 0,\r\n                    block: 0\r\n                }).exec();\r\n                setCache('teamLists', teamList);\r\n                return getTeam(teamId, uniqueId, 1);\r\n            } else {\r\n                Log.writeLog(Log.eLogLevel.error, `[getTeam] : TeamMember not found = ${teamId}`, uniqueId);\r\n                return null;\r\n            }\r\n        }\r\n    } else {\r\n        teamList = await Oauth.find({role: 'employee'}, {\r\n            _id: 0,\r\n            __v: 0,\r\n            description: 0,\r\n            userId: 0,\r\n            password: 0,\r\n            role: 0,\r\n            block: 0\r\n        }).exec();\r\n        setCache('teamLists', teamList);\r\n        return getTeam(teamId, uniqueId, 1);\r\n    }\r\n}\r\n\r\nasync function getTeamMemberProductList(product_id, teamMember_id, uniqueId, index = 0) {\r\n    let teamMemberProductList = getCache('teamMemberProductList');\r\n    if(teamMemberProductList !== null) {\r\n        let singleTeamMemberProduct = teamMemberProductList.find((teamMemberProduct) => teamMemberProduct.product_id === product_id && teamMemberProduct.teamMember_id === teamMember_id);\r\n        if(singleTeamMemberProduct) {\r\n            return singleTeamMemberProduct;\r\n        } else {\r\n            if(index === 0) {\r\n                teamMemberProductList = await TeamMemberProduct.find()\r\n                    .exec();\r\n                setCache('teamMemberProductList', teamMemberProductList);\r\n                return getTeamMemberProductList(product_id, teamMember_id, uniqueId, 1);\r\n            } else {\r\n                Log.writeLog(Log.eLogLevel.error, `[getTeamMemberProductList] : Record not found ProductId = ${product_id}  teamId = ${teamMember_id}`, uniqueId);\r\n                return null;\r\n            }\r\n        }\r\n    } else {\r\n        teamMemberProductList = await TeamMemberProduct.find()\r\n            .exec();\r\n        setCache('teamMemberProductList', teamMemberProductList);\r\n        return getTeamMemberProductList(product_id, teamMember_id, uniqueId, 1);\r\n    }\r\n}\r\n\r\nexport async function getBookingOrder(req, res) {\r\n    let uniqueId = getGuid();\r\n    try {\r\n        let startDayDateTime = moment()\r\n            .tz('Asia/Kolkata')\r\n            .startOf('day')\r\n            .format();\r\n        let endDayDateTime = moment()\r\n            .tz('Asia/Kolkata')\r\n            .endOf('day')\r\n            .format();\r\n        let NormalDateStartDateTime = new Date(startDayDateTime);\r\n        let NormalDateEndDateTime = new Date(endDayDateTime);\r\n\r\n        let responseObject = {\r\n            runningOrder: [],\r\n            runningLate: [],\r\n            recentOrders: [],\r\n            recentComplete: []\r\n        };\r\n\r\n        let recentOrders = await Booking.find({\r\n            status: 'waiting',\r\n            bookingEndTime: {\r\n                $gte: NormalDateStartDateTime.toUTCString(),\r\n                $lte: NormalDateEndDateTime.toUTCString()\r\n            }\r\n        }, {teamWiseProductList: 0})\r\n            .sort({bookingStartTime: 1})\r\n            .exec();\r\n\r\n        let runningOrders = await Booking.find({\r\n            status: 'process',\r\n            bookingEndTime: {\r\n                $gte: NormalDateStartDateTime.toUTCString(),\r\n                $lte: NormalDateEndDateTime.toUTCString()\r\n            }\r\n        }, {teamWiseProductList: 0})\r\n            .sort({bookingStartTime: 1})\r\n            .exec();\r\n\r\n        let lateOrders = await Booking.find({\r\n            status: 'late',\r\n            bookingEndTime: {\r\n                $gte: NormalDateStartDateTime.toUTCString(),\r\n                $lte: NormalDateEndDateTime.toUTCString()\r\n            }\r\n        }, {teamWiseProductList: 0})\r\n            .sort({bookingStartTime: 1})\r\n            .exec();\r\n\r\n        let recentComplete = await Booking.find({\r\n            status: 'finish',\r\n            bookingEndTime: {\r\n                $gte: NormalDateStartDateTime.toUTCString(),\r\n                $lte: NormalDateEndDateTime.toUTCString()\r\n            }\r\n        }, {teamWiseProductList: 0})\r\n            .sort({bookingStartTime: 1})\r\n            .exec();\r\n\r\n\r\n        responseObject.recentOrders = recentOrders;\r\n        responseObject.runningLate = lateOrders;\r\n        responseObject.runningOrder = runningOrders;\r\n        responseObject.recentComplete = recentComplete;\r\n\r\n        Log.writeLog(Log.eLogLevel.info, '[getBookingOrder] : ' + JSON.stringify(responseObject), uniqueId);\r\n        res.status(200)\r\n            .json(responseObject);\r\n\r\n    } catch(error) {\r\n        Log.writeLog(Log.eLogLevel.error, '[getBookingOrder] : ' + JSON.stringify(errorJsonResponse(error.message.toString(), error.message.toString())), uniqueId);\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport async function updateBookingOrder(req, res) {\r\n    let uniqueId = getGuid();\r\n    try {\r\n\r\n        const orderId = req.params.orderId;\r\n        const paymentMemberId = req.decoded.user.id;\r\n        const paymentMemberName = req.decoded.user.first_name + ' ' + req.decoded.user.last_name;\r\n        let orderType = req.body.orderType;\r\n\r\n        if(orderType === 'payment finish') {\r\n\r\n            const message = 'payment finish';\r\n\r\n            const updateResult = await Booking.update({id: orderId}, {\r\n                paymentComplete: true,\r\n                paymentMemberId: paymentMemberId,\r\n                paymentMemberName: paymentMemberName\r\n            })\r\n                .exec();\r\n\r\n            if(updateResult) {\r\n                if(updateResult.nModified === 1 || updateResult.n === 1) {\r\n                    let sodPublishMessage = {\r\n                        message: message,\r\n                        data: {\r\n                            id: orderId,\r\n                            paymentComplete: true,\r\n                            paymentMemberId: paymentMemberId,\r\n                            paymentMemberName: paymentMemberName\r\n                        }\r\n                    };\r\n                    await socketPublishMessage('SOD', sodPublishMessage);\r\n                    let _singleLateBooking = await Booking.findOne({id: orderId})\r\n                        .exec();\r\n\r\n                    //TODO send to teamMember\r\n                    _singleLateBooking.teamWiseProductList.forEach(async(singleTeamWiseProductList) => {\r\n                        await socketPublishMessage(singleTeamWiseProductList.id, sodPublishMessage);\r\n                    });\r\n                    Log.writeLog(Log.eLogLevel.info, '[updateBookingOrder] : ' + JSON.stringify({result: true}), uniqueId);\r\n                    res.status(200)\r\n                        .json({result: true});\r\n\r\n                } else {\r\n                    Log.writeLog(Log.eLogLevel.error, '[updateBookingOrder] : ' + JSON.stringify(errorJsonResponse(updateResult, {result: false})), uniqueId);\r\n                    res.status(200)\r\n                        .json({result: false});\r\n                    console.log(updateResult);\r\n                }\r\n            } else {\r\n                Log.writeLog(Log.eLogLevel.error, '[updateBookingOrder] : ' + JSON.stringify(errorJsonResponse('contact to developer', {result: false})), uniqueId);\r\n                console.log('contact to developer');\r\n            }\r\n        } else {\r\n            res.status(400)\r\n                .json({result: false});\r\n        }\r\n\r\n    } catch(error) {\r\n        Log.writeLog(Log.eLogLevel.error, '[updateBookingOrder] : ' + JSON.stringify(errorJsonResponse(error.message.toString(), error.message.toString())), uniqueId);\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport async function updateBookingEmployeeOrder(req, res, next) {\r\n    let uniqueId = getGuid();\r\n    try {\r\n\r\n        let orderId = req.params.orderId;\r\n        let teamMemberId = req.params.teamMemberId;\r\n        let orderType = req.body.orderType;\r\n\r\n        let currentTime = moment.tz('Asia/Kolkata')\r\n            .format();\r\n        let currentDate = new Date(currentTime);\r\n        let statusDateTime = currentDate.toUTCString();\r\n\r\n        let status = 'process';\r\n        let column = 'running';\r\n        let message = 'running';\r\n\r\n        if(orderType === 'finish') {\r\n            status = 'finish';\r\n            column = 'finish';\r\n            message = 'finish';\r\n        }\r\n\r\n\r\n        //Todo update innerData for TeamMember orderstatus,startTime,orderstatusTime\r\n        let updateResultTeamMember = null;\r\n        if(orderType === 'finish') {\r\n            updateResultTeamMember = await Booking.update({id: orderId, 'teamWiseProductList.id': teamMemberId}, {\r\n                $set: {\r\n                    'teamWiseProductList.$.orderStatus': status,\r\n                    'teamWiseProductList.$.column': column,\r\n                    'teamWiseProductList.$.statusDateTime': statusDateTime,\r\n                    'teamWiseProductList.$.endTime': statusDateTime,\r\n                }\r\n            });\r\n        } else {\r\n            updateResultTeamMember = await Booking.update({id: orderId, 'teamWiseProductList.id': teamMemberId}, {\r\n                $set: {\r\n                    'teamWiseProductList.$.orderStatus': status,\r\n                    'teamWiseProductList.$.column': column,\r\n                    'teamWiseProductList.$.statusDateTime': statusDateTime,\r\n                    'teamWiseProductList.$.startTime': statusDateTime,\r\n                }\r\n            });\r\n        }\r\n\r\n        if(updateResultTeamMember) {\r\n\r\n            if(updateResultTeamMember.nModified > 0 || updateResultTeamMember.n > 0) {\r\n\r\n                if(orderType !== 'finish') {\r\n                    let updateResult = await Booking.update({id: orderId, column: {$ne: column}}, {\r\n                        status: status,\r\n                        column: column,\r\n                        statusDateTime: statusDateTime\r\n                    })\r\n                        .exec();\r\n\r\n                    let sodPublishMessage = {\r\n                        message: message,\r\n                        data: {\r\n                            id: orderId,\r\n                            orderType: orderType,\r\n                            status: status,\r\n                            column: column,\r\n                            statusDateTime: statusDateTime\r\n                        }\r\n                    };\r\n\r\n                    if(updateResult.nModified > 0 || updateResult.n > 0) {\r\n                        await socketPublishMessage('SOD', sodPublishMessage);\r\n                        Log.writeLog(Log.eLogLevel.info, '[updateBookingOrderSOD] : ' + JSON.stringify({result: true}), uniqueId);\r\n                    }\r\n\r\n                    await socketPublishMessage(teamMemberId, sodPublishMessage);\r\n                    Log.writeLog(Log.eLogLevel.info, '[updateBookingOrderTeamMember] : ' + JSON.stringify({result: true}), uniqueId);\r\n                    res.status(200)\r\n                        .json({result: true});\r\n                } else {\r\n\r\n                    let sodPublishMessage = {\r\n                        message: message,\r\n                        data: {\r\n                            id: orderId,\r\n                            orderType: orderType,\r\n                            status: status,\r\n                            column: column,\r\n                            statusDateTime: statusDateTime\r\n                        }\r\n                    };\r\n\r\n                    let findResult = await Booking.find({\r\n                        id: orderId,\r\n                        'teamWiseProductList.orderStatus': 'waiting'\r\n                    })\r\n                        .exec();\r\n\r\n                    let findResult1 = await Booking.find({\r\n                        id: orderId,\r\n                        'teamWiseProductList.orderStatus': 'process'\r\n                    })\r\n                        .exec();\r\n\r\n                    let findResult2 = await Booking.find({\r\n                        id: orderId,\r\n                        'teamWiseProductList.orderStatus': 'late'\r\n                    })\r\n                        .exec();\r\n\r\n                    if(!((findResult.length > 0) || (findResult1.length > 0) || (findResult2.length > 0))) {\r\n\r\n                        let updateResult = await Booking.update({id: orderId}, {\r\n                            status: status,\r\n                            column: column,\r\n                            statusDateTime: statusDateTime\r\n                        })\r\n                            .exec();\r\n\r\n                        if(updateResult.nModified > 0 || updateResult.n > 0) {\r\n                            await socketPublishMessage('SOD', sodPublishMessage);\r\n                            Log.writeLog(Log.eLogLevel.info, '[updateBookingOrderSOD] : ' + JSON.stringify({result: true}), uniqueId);\r\n                        } else {\r\n                            Log.writeLog(Log.eLogLevel.error, '[updateBookingOrderSOD] : ' + JSON.stringify(updateResult), uniqueId);\r\n                            res.status(200)\r\n                                .json({result: false});\r\n                        }\r\n                    }\r\n\r\n                    await socketPublishMessage(teamMemberId, sodPublishMessage);\r\n                    Log.writeLog(Log.eLogLevel.info, '[updateBookingOrderTeamMember] : ' + JSON.stringify({result: true}), uniqueId);\r\n                    res.status(200)\r\n                        .json({result: true});\r\n                }\r\n\r\n            } else {\r\n                Log.writeLog(Log.eLogLevel.error, '[updateBookingOrder] : ' + JSON.stringify(errorJsonResponse('contact to developer', {result: false})), uniqueId);\r\n                res.status(200)\r\n                    .json({result: false});\r\n            }\r\n        } else {\r\n            res.status(200)\r\n                .json({result: false});\r\n        }\r\n\r\n    } catch(error) {\r\n        Log.writeLog(Log.eLogLevel.error, '[updateBookingOrder] : ' + JSON.stringify(errorJsonResponse(error.message.toString(), error.message.toString())), uniqueId);\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport async function getTeamMemberBookingOrder(req, res) {\r\n    let uniqueId = getGuid();\r\n    try {\r\n\r\n        let teamMemberId = req.params.teamMemberId;\r\n        let startDayDateTime = moment()\r\n            .tz('Asia/Kolkata')\r\n            .startOf('day')\r\n            .format();\r\n        let endDayDateTime = moment()\r\n            .tz('Asia/Kolkata')\r\n            .endOf('day')\r\n            .format();\r\n        let NormalDateStartDateTime = new Date(startDayDateTime);\r\n        let NormalDateEndDateTime = new Date(endDayDateTime);\r\n\r\n        let responseObject = {\r\n            runningOrder: [],\r\n            runningLate: [],\r\n            recentOrders: [],\r\n            recentComplete: []\r\n        };\r\n\r\n        let recentOrders = await Booking.find({\r\n            bookingEndTime: {\r\n                $gte: NormalDateStartDateTime.toUTCString(),\r\n                $lte: NormalDateEndDateTime.toUTCString()\r\n            },\r\n            teamWiseProductList: {\r\n                $elemMatch: {\r\n                    id: teamMemberId,\r\n                    orderStatus: 'waiting'\r\n                }\r\n            }\r\n        }, {basket: 0})\r\n            .sort({bookingStartTime: 1})\r\n            .exec();\r\n\r\n        let runningOrders = await Booking.find({\r\n            bookingEndTime: {\r\n                $gte: NormalDateStartDateTime.toUTCString(),\r\n                $lte: NormalDateEndDateTime.toUTCString()\r\n            },\r\n            teamWiseProductList: {\r\n                $elemMatch: {\r\n                    id: teamMemberId,\r\n                    orderStatus: 'process'\r\n                }\r\n            }\r\n        }, {basket: 0})\r\n            .sort({bookingStartTime: 1})\r\n            .exec();\r\n\r\n        let lateOrders = await Booking.find({\r\n            bookingEndTime: {\r\n                $gte: NormalDateStartDateTime.toUTCString(),\r\n                $lte: NormalDateEndDateTime.toUTCString()\r\n            },\r\n            teamWiseProductList: {\r\n                $elemMatch: {\r\n                    id: teamMemberId,\r\n                    orderStatus: 'late'\r\n                }\r\n            }\r\n        }, {basket: 0})\r\n            .sort({bookingStartTime: 1})\r\n            .exec();\r\n\r\n        let recentComplete = await Booking.find({\r\n            bookingEndTime: {\r\n                $gte: NormalDateStartDateTime.toUTCString(),\r\n                $lte: NormalDateEndDateTime.toUTCString()\r\n            },\r\n            teamWiseProductList: {\r\n                $elemMatch: {\r\n                    id: teamMemberId,\r\n                    orderStatus: 'finish'\r\n                }\r\n            }\r\n        }, {basket: 0})\r\n            .sort({bookingStartTime: 1})\r\n            .exec();\r\n\r\n\r\n        responseObject.recentOrders = recentOrders;\r\n        responseObject.runningLate = lateOrders;\r\n        responseObject.runningOrder = runningOrders;\r\n        responseObject.recentComplete = recentComplete;\r\n\r\n        Log.writeLog(Log.eLogLevel.info, '[getTeamMemberBookingOrder] : ' + JSON.stringify(responseObject), uniqueId);\r\n        res.status(200)\r\n            .json(responseObject);\r\n\r\n\r\n    } catch(error) {\r\n        Log.writeLog(Log.eLogLevel.error, '[getTeamMemberBookingOrder] : ' + JSON.stringify(errorJsonResponse(error.message.toString(), error.message.toString())), uniqueId);\r\n        console.log(error);\r\n    }\r\n}\r\n"]}