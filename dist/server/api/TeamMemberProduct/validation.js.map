{"version":3,"sources":["api/TeamMemberProduct/validation.js"],"names":["validateAuthorization","req","res","next","authorizationHeader","headers","token","headerParts","trim","split","toLowerCase","length","statusCode","status","json","user_msg","dev_msg","verify","jwtSecretKey","err","decoded","user","role","deleteTeamId","params","teamId","string","required","addTeamService","body","id","uuid","product_id","approxTime","number","integer","min","max","RemoveTeamService"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;;;kBAEe;AACX;AACAA,2BAAuB,+BAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC5C;AACA,YAAIC,sBAAsBH,IAAII,OAAJ,CAAY,eAAZ,CAA1B;AACA,YAAIC,QAAM,EAAV;AACA,YAAGF,mBAAH,EAAuB;AACnB,gBAAIG,cAAcH,oBAAoBI,IAApB,GAA2BC,KAA3B,CAAiC,GAAjC,CAAlB;AACA,gBAAGF,YAAY,CAAZ,EAAeG,WAAf,OAAiC,QAApC,EAA6C;AACzCJ,wBAAQC,YAAYA,YAAYI,MAAZ,GAAmB,CAA/B,CAAR;AACH,aAFD,MAGK;AACD,oBAAIC,aAAW,GAAf;AACA,uBAAOV,IAAIW,MAAJ,CAAWD,UAAX,EAAuBE,IAAvB,CAA4B;AAC/BC,8BAAU,+BADqB;AAE/BC,6BAAS;AAFsB,iBAA5B,CAAP;AAIH;AACJ;;AAED;AACA,YAAIV,KAAJ,EAAW;AACP;AACA,mCAAIW,MAAJ,CAAWX,KAAX,EAAkB,sBAAQY,YAA1B,EAAwC,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AAC5D,oBAAID,GAAJ,EAAS;AACL,wBAAIP,aAAW,GAAf;AACA,2BAAOV,IAAIW,MAAJ,CAAWD,UAAX,EAAuBE,IAAvB,CAA4B;AAC/BC,kCAAU,+BADqB;AAE/BC,iCAAS;AAFsB,qBAA5B,CAAP;AAIH,iBAND,MAMO;AACH;AACA,wBAAII,QAAQC,IAAR,CAAaC,IAAb,CAAkBZ,WAAlB,MAAmC,OAAvC,EAAgD;AAC5CT,4BAAImB,OAAJ,GAAcA,OAAd;AACAjB;AACH,qBAHD,MAGK;AACD,4BAAIS,aAAW,GAAf;AACA,+BAAOV,IAAIW,MAAJ,CAAWD,UAAX,EAAuBE,IAAvB,CAA4B;AAC/BC,sCAAU,oBADqB;AAE/BC,qCAAS;AAFsB,yBAA5B,CAAP;AAIH;AACJ;AACJ,aApBD;AAqBH,SAvBD,MAuBO;AACH;AACA;AACA,gBAAIJ,aAAW,GAAf;AACA,mBAAOV,IAAIW,MAAJ,CAAWD,UAAX,EAAuBE,IAAvB,CAA4B;AAC/BC,0BAAU,oBADqB;AAE/BC,yBAAS;AAFsB,aAA5B,CAAP;AAIH;AACJ,KArDU;;AAwDXO,kBAAc;AACVC,gBAAQ;AACJC,oBAAS,cAAIC,MAAJ,GAAaC,QAAb;AADL;AADE,KAxDH;;AA8DXC,oBAAgB;AACZC,cAAM;AACFC,gBAAI,cAAIJ,MAAJ,GAAaK,IAAb,GAAoBJ,QAApB,EADF;AAEFK,wBAAY,cAAIN,MAAJ,GAAaK,IAAb,GAAoBJ,QAApB,EAFV;AAGFM,wBAAW,cAAIC,MAAJ,GAAaC,OAAb,GAAuBC,GAAvB,CAA2B,CAA3B,EAA8BC,GAA9B,CAAkC,EAAlC;AAHT;AADM,KA9DL;;AAsEXC,uBAAmB;AACfT,cAAM;AACFC,gBAAI,cAAIJ,MAAJ,GAAaK,IAAb,GAAoBJ,QAApB,EADF;AAEFK,wBAAY,cAAIN,MAAJ,GAAaK,IAAb,GAAoBJ,QAApB;AAFV;AADS;;AAtER,C","file":"validation.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport {jwtdata} from '../../config/commonHelper';\nimport Joi from 'joi';\n\nexport default {\n    // route middleware to verify a token\n    validateAuthorization: function(req, res, next) {\n        // check header or url parameters or post parameters for token\n        var authorizationHeader = req.headers['authorization'];\n        var token='';\n        if(authorizationHeader){\n            var headerParts = authorizationHeader.trim().split(' ');\n            if(headerParts[0].toLowerCase() === 'bearer'){\n                token = headerParts[headerParts.length-1];\n            }\n            else {\n                var statusCode=401;\n                return res.status(statusCode).json({\n                    user_msg: 'Failed to authenticate token.',\n                    dev_msg: 'Failed to authenticate token.',\n                });\n            }\n        }\n\n        // decode token\n        if (token) {\n            // verifies secret and checks exp\n            jwt.verify(token, jwtdata.jwtSecretKey, function (err, decoded) {\n                if (err) {\n                    var statusCode=401;\n                    return res.status(statusCode).json({\n                        user_msg: 'Failed to authenticate token.',\n                        dev_msg: 'Failed to authenticate token.',\n                    });\n                } else {\n                    // if everything is good, save to request for use in other routes\n                    if (decoded.user.role.toLowerCase() == \"admin\") {\n                        req.decoded = decoded;\n                        next();\n                    }else{\n                        var statusCode=403;\n                        return res.status(statusCode).json({\n                            user_msg: 'UnAuthorized user.',\n                            dev_msg: 'UnAuthorized user.',\n                        });\n                    }\n                }\n            });\n        } else {\n            // if there is no token\n            // return an error\n            var statusCode=401;\n            return res.status(statusCode).json({\n                user_msg: 'No token provided.',\n                dev_msg: 'No token provided.',\n            });\n        }\n    },\n\n\n    deleteTeamId: {\n        params: {\n            teamId : Joi.string().required()\n        }\n    },\n\n    addTeamService: {\n        body: {\n            id: Joi.string().uuid().required(),\n            product_id: Joi.string().uuid().required(),\n            approxTime:Joi.number().integer().min(0).max(59),\n        }\n    },\n\n    RemoveTeamService: {\n        body: {\n            id: Joi.string().uuid().required(),\n            product_id: Joi.string().uuid().required()\n        }\n    }\n\n};\n"]}