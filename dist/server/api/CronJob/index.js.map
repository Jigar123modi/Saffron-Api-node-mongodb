{"version":3,"sources":["api/CronJob/index.js"],"names":["currentDate","find","__v","_id","then","timeSlotList","err","forEach","singleTimeSlot","split","start_time","NormalStartDateTime","Date","getFullYear","getMonth","getDate","FindTimeSlot","findOne","bookingEndTime","toUTCString","BookingAdd","id","customer_id","basket","teamWiseProductList","total","bookingDateTime","bookingStartTime","status","column","customerName","visited","statusDateTime","save","InsertBooking","writeLog","eLogLevel","info","error","errorMessage","message","toString","console","log","AddFirstOrder","moment","require","_","setInterval","startDayDateTime","tz","startOf","format","NormalDateStartDateTime","currentTime","_LateBooking","$gte","$lte","exec","all","map","singleBooking","_singleLateBooking","singleLateBooking","updateResult","update","nModified","n","sodPublishMessage","data","orderStatus","$set","hours","getHours","minutes","getMinutes"],"mappings":"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","file":"index.js","sourcesContent":["import Booking from '../Booking/Booking.model';\r\nimport TimeSlot from '../TimeSlot/TimeSlot.model';\r\nimport {socketPublishMessage} from '../Socket/index';\r\nimport {getGuid} from '../../config/commonHelper';\r\nimport Log from '../../config/Log';\r\n\r\nlet moment = require('moment-timezone');\r\nlet _ = require('lodash');\r\n\r\n//todo find running late orders\r\nsetInterval(async () => {\r\n    try {\r\n\r\n        let startDayDateTime = moment().tz('Asia/Kolkata').startOf('day').format();\r\n        let NormalDateStartDateTime = new Date(startDayDateTime);\r\n        let currentTime = moment.tz('Asia/Kolkata').format();\r\n        let currentDate = new Date(currentTime);\r\n\r\n        let _LateBooking = await Booking.find({\r\n            status: 'waiting',\r\n            column: 'recent orders',\r\n            bookingStartTime: {\r\n                $gte: NormalDateStartDateTime.toUTCString(),\r\n                $lte: currentDate.toUTCString()\r\n            }\r\n        }).exec();\r\n\r\n        await Promise.all(_LateBooking.map(async (singleBooking) => {\r\n            let _singleLateBooking = _LateBooking.find((singleLateBooking) => singleLateBooking.id === singleBooking.id);\r\n            let statusDateTime = currentDate.toUTCString();\r\n            let updateResult = await Booking.update({id: singleBooking.id}, {\r\n                status: 'late',\r\n                column: 'running late',\r\n                statusDateTime: statusDateTime\r\n            }).exec();\r\n            if (updateResult) {\r\n                if (updateResult.nModified === 1 || updateResult.n === 1) {\r\n                    let sodPublishMessage = {\r\n                        message: 'running late',\r\n                        data: {\r\n                            id: _singleLateBooking.id,\r\n                            status: 'late',\r\n                            column: 'running late',\r\n                            statusDateTime: statusDateTime\r\n                        }\r\n                    };\r\n                    await socketPublishMessage('SOD', sodPublishMessage);\r\n\r\n                } else {\r\n                    Log.writeLog(Log.eLogLevel.error, '[setInterval] : ' + JSON.stringify(updateResult));\r\n                    console.log(updateResult);\r\n                }\r\n            } else {\r\n                Log.writeLog(Log.eLogLevel.error, '[setInterval] : ' + JSON.stringify(errorMessage(updateResult,'contact to Developer')));\r\n                console.log('contact to developer');\r\n            }\r\n\r\n            //Todo for the teamMember\r\n            _singleLateBooking.teamWiseProductList.map(async(data) => {\r\n\r\n                if(data.orderStatus === 'waiting') {\r\n\r\n                    //Todo update record\r\n                    await Booking.update({id: _singleLateBooking.id, 'teamWiseProductList.id': data.id}, {\r\n                        $set: {\r\n                            'teamWiseProductList.$.orderStatus': \"late\",\r\n                            'teamWiseProductList.$.column': \"running late\",\r\n                            'teamWiseProductList.$.statusDateTime': statusDateTime,\r\n                        }\r\n                    });\r\n\r\n                    let sodPublishMessage = {\r\n                        message: 'running late',\r\n                        data: {\r\n                            id: _singleLateBooking.id,\r\n                            status: 'late',\r\n                            column: 'running late',\r\n                            statusDateTime: statusDateTime\r\n                        }\r\n                    };\r\n                    await socketPublishMessage(data.id, sodPublishMessage);\r\n                }\r\n\r\n            });\r\n        }));\r\n\r\n        // check running recent order\r\n        _LateBooking = await Booking.find({\r\n            status: 'process',\r\n            column: 'running',\r\n            bookingStartTime: {\r\n                $gte: NormalDateStartDateTime.toUTCString(),\r\n                $lte: currentDate.toUTCString()\r\n            }\r\n        }).exec();\r\n\r\n        await Promise.all(_LateBooking.map(async (singleBooking) => {\r\n            let _singleLateBooking = _LateBooking.find((singleLateBooking) => singleLateBooking.id === singleBooking.id);\r\n            let statusDateTime = currentDate.toUTCString();\r\n\r\n            //Todo for the teamMember\r\n            _singleLateBooking.teamWiseProductList.map(async(data) => {\r\n\r\n                if(data.orderStatus === 'waiting') {\r\n\r\n                    //Todo update record\r\n                    await Booking.update({id: _singleLateBooking.id, 'teamWiseProductList.id': data.id}, {\r\n                        $set: {\r\n                            'teamWiseProductList.$.orderStatus': \"late\",\r\n                            'teamWiseProductList.$.column': \"running late\",\r\n                            'teamWiseProductList.$.statusDateTime': statusDateTime,\r\n                        }\r\n                    });\r\n\r\n                    let sodPublishMessage = {\r\n                        message: 'running late',\r\n                        data: {\r\n                            id: _singleLateBooking.id,\r\n                            status: 'late',\r\n                            column: 'running late',\r\n                            statusDateTime: statusDateTime\r\n                        }\r\n                    };\r\n                    await socketPublishMessage(data.id, sodPublishMessage);\r\n                }\r\n\r\n            });\r\n        }));\r\n\r\n    } catch (error) {\r\n        Log.writeLog(Log.eLogLevel.error, '[setInterval] : ' + JSON.stringify(errorMessage(error.message.toString(),error.message.toString())));\r\n        console.log(error);\r\n    }\r\n\r\n}, 10000);\r\n\r\nsetInterval(async() => {\r\n    let currentTime = moment.tz('Asia/Kolkata').format();\r\n    let currentDate = new Date(currentTime);\r\n    let hours = currentDate.getHours();\r\n    let minutes = currentDate.getMinutes();\r\n    if (hours === 9 && minutes === 39)\r\n        await AddFirstOrder(currentDate);\r\n\r\n}, 60000);\r\n\r\nexport async function AddFirstOrder(currentDate) {\r\n    TimeSlot.find({}, {__v: 0, _id: 0})\r\n        .then(async(timeSlotList, err) => {\r\n            if(!err) {\r\n                timeSlotList.forEach(async(singleTimeSlot) => {\r\n                    let split = singleTimeSlot.start_time.split(':');\r\n                    let NormalStartDateTime = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), split[0], split[1], 0);\r\n                    //Todo set Find query\r\n                    let FindTimeSlot = await Booking.findOne({bookingEndTime: NormalStartDateTime.toUTCString()});\r\n                    if(FindTimeSlot == null) {\r\n                        let BookingAdd = new Booking({\r\n                            id: getGuid(),\r\n                            customer_id: 10000000,\r\n                            basket: {},\r\n                            teamWiseProductList: {},\r\n                            total: 0,\r\n                            bookingDateTime: currentDate.toUTCString(),\r\n                            bookingStartTime: NormalStartDateTime.toUTCString(),\r\n                            bookingEndTime: NormalStartDateTime.toUTCString(),\r\n                            status: 'first Order',\r\n                            column: 'first Order',\r\n                            customerName: 'Developer Test',\r\n                            visited: false,\r\n                            statusDateTime: currentDate.toUTCString()\r\n                        });\r\n                        await BookingAdd.save()\r\n                            .then(async function(InsertBooking, err) {\r\n                                if(!err) {\r\n                                    if(InsertBooking) {\r\n                                        Log.writeLog(Log.eLogLevel.info, '[setInterval] : ' + JSON.stringify('Save Successfully'));\r\n                                    } else {\r\n                                        Log.writeLog(Log.eLogLevel.error, '[setInterval] : ' + JSON.stringify(errorMessage(InsertBooking, InsertBooking)));\r\n                                    }\r\n                                } else {\r\n                                    Log.writeLog(Log.eLogLevel.error, '[setInterval] : ' + JSON.stringify(errorMessage(err.message.toString(), err.message.toString())));\r\n                                }\r\n                            });\r\n                    } else {\r\n                        console.log('order has been found in the db');\r\n                        Log.writeLog(Log.eLogLevel.error, '[setInterval] : ' + 'order has been found');\r\n                    }\r\n                });\r\n            } else {\r\n                Log.writeLog(Log.eLogLevel.error, '[setInterval] : ' + JSON.stringify(errorMessage(err.message.toString(), err.message.toString())));\r\n                console.log(err);\r\n            }\r\n        });\r\n\r\n}\r\n"]}