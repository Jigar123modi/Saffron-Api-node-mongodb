{"version":3,"sources":["api/Service/validation.js"],"names":["validateAuthorization","req","res","next","authorizationHeader","headers","token","headerParts","trim","split","toLowerCase","length","statusCode","status","json","user_msg","dev_msg","verify","jwtSecretKey","err","decoded","user","role","deleteServiceId","params","serviceId","string","required"],"mappings":";;;;;;AACA;;;;AACA;;AACA;;;;;;kBAEe;AACX;AACAA,2BAAuB,+BAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AAC5C;AACA,YAAIC,sBAAsBH,IAAII,OAAJ,CAAY,eAAZ,CAA1B;AACA,YAAIC,QAAM,EAAV;AACA,YAAGF,mBAAH,EAAuB;AACnB,gBAAIG,cAAcH,oBAAoBI,IAApB,GAA2BC,KAA3B,CAAiC,GAAjC,CAAlB;AACA,gBAAGF,YAAY,CAAZ,EAAeG,WAAf,OAAiC,QAApC,EAA6C;AACzCJ,wBAAQC,YAAYA,YAAYI,MAAZ,GAAmB,CAA/B,CAAR;AACH,aAFD,MAGK;AACD,oBAAIC,aAAW,GAAf;AACA,uBAAOV,IAAIW,MAAJ,CAAWD,UAAX,EAAuBE,IAAvB,CAA4B;AAC/BC,8BAAU,+BADqB;AAE/BC,6BAAS;AAFsB,iBAA5B,CAAP;AAIH;AACJ;;AAED;AACA,YAAIV,KAAJ,EAAW;AACP;AACA,mCAAIW,MAAJ,CAAWX,KAAX,EAAkB,sBAAQY,YAA1B,EAAwC,UAAUC,GAAV,EAAeC,OAAf,EAAwB;AAC5D,oBAAID,GAAJ,EAAS;AACL,wBAAIP,aAAW,GAAf;AACA,2BAAOV,IAAIW,MAAJ,CAAWD,UAAX,EAAuBE,IAAvB,CAA4B;AAC/BC,kCAAU,+BADqB;AAE/BC,iCAAS;AAFsB,qBAA5B,CAAP;AAIH,iBAND,MAMO;AACH;AACA,wBAAII,QAAQC,IAAR,CAAaC,IAAb,CAAkBZ,WAAlB,OAAoC,OAAxC,EAAiD;AAC7CT,4BAAImB,OAAJ,GAAcA,OAAd;AACAjB;AACH,qBAHD,MAGK;AACD,4BAAIS,aAAW,GAAf;AACA,+BAAOV,IAAIW,MAAJ,CAAWD,UAAX,EAAuBE,IAAvB,CAA4B;AAC/BC,sCAAU,oBADqB;AAE/BC,qCAAS;AAFsB,yBAA5B,CAAP;AAIH;AACJ;AACJ,aApBD;AAqBH,SAvBD,MAuBO;AACH;AACA;AACA,gBAAIJ,aAAW,GAAf;AACA,mBAAOV,IAAIW,MAAJ,CAAWD,UAAX,EAAuBE,IAAvB,CAA4B;AAC/BC,0BAAU,oBADqB;AAE/BC,yBAAS;AAFsB,aAA5B,CAAP;AAIH;AACJ,KArDU;;AAwDXO,qBAAiB;AACbC,gBAAQ;AACJC,uBAAY,cAAIC,MAAJ,GAAaC,QAAb;AADR;AADK;;AAxDN,C","file":"validation.js","sourcesContent":["\r\nimport jwt from 'jsonwebtoken';\r\nimport {jwtdata} from '../../config/commonHelper';\r\nimport Joi from 'joi';\r\n\r\nexport default {\r\n    // route middleware to verify a token\r\n    validateAuthorization: function(req, res, next) {\r\n        // check header or url parameters or post parameters for token\r\n        var authorizationHeader = req.headers['authorization'];\r\n        var token='';\r\n        if(authorizationHeader){\r\n            var headerParts = authorizationHeader.trim().split(' ');\r\n            if(headerParts[0].toLowerCase() === 'bearer'){\r\n                token = headerParts[headerParts.length-1];\r\n            }\r\n            else {\r\n                var statusCode=401;\r\n                return res.status(statusCode).json({\r\n                    user_msg: 'Failed to authenticate token.',\r\n                    dev_msg: 'Failed to authenticate token.',\r\n                });\r\n            }\r\n        }\r\n\r\n        // decode token\r\n        if (token) {\r\n            // verifies secret and checks exp\r\n            jwt.verify(token, jwtdata.jwtSecretKey, function (err, decoded) {\r\n                if (err) {\r\n                    var statusCode=401;\r\n                    return res.status(statusCode).json({\r\n                        user_msg: 'Failed to authenticate token.',\r\n                        dev_msg: 'Failed to authenticate token.',\r\n                    });\r\n                } else {\r\n                    // if everything is good, save to request for use in other routes\r\n                    if (decoded.user.role.toLowerCase() === \"admin\") {\r\n                        req.decoded = decoded;\r\n                        next();\r\n                    }else{\r\n                        var statusCode=403;\r\n                        return res.status(statusCode).json({\r\n                            user_msg: 'UnAuthorized user.',\r\n                            dev_msg: 'UnAuthorized user.',\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // if there is no token\r\n            // return an error\r\n            var statusCode=401;\r\n            return res.status(statusCode).json({\r\n                user_msg: 'No token provided.',\r\n                dev_msg: 'No token provided.',\r\n            });\r\n        }\r\n    },\r\n\r\n\r\n    deleteServiceId: {\r\n        params: {\r\n            serviceId : Joi.string().required()\r\n        }\r\n    }\r\n\r\n};\r\n"]}