{"version":3,"sources":["api/oauth/validation.js"],"names":["validateAuthorization","req","res","next","authorizationHeader","headers","token","headerParts","trim","split","toLowerCase","length","statusCode","status","json","user_msg","dev_msg","verify","jwtSecretKey","err","decoded","user","role","validateAuthorizationUser","registerValidate","body","first_name","string","regex","required","last_name","mobile_number","password","confirm_password","valid","ref","email_id","email","minDomainAtoms","deleteUserId","params","userId","updateUser","block","boolean"],"mappings":"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","file":"validation.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport {jwtdata} from '../../config/commonHelper';\r\nimport Joi from 'joi';\r\n\r\nexport default {\r\n    // route middleware to verify a token\r\n    validateAuthorization: function (req, res, next) {\r\n        // check header or url parameters or post parameters for token\r\n        var authorizationHeader = req.headers['authorization'];\r\n        var token = '';\r\n        if (authorizationHeader) {\r\n            var headerParts = authorizationHeader.trim().split(' ');\r\n            if (headerParts[0].toLowerCase() === 'bearer') {\r\n                token = headerParts[headerParts.length - 1];\r\n            }\r\n            else {\r\n                var statusCode = 401;\r\n                return res.status(statusCode).json({\r\n                    user_msg: 'Failed to authenticate token.',\r\n                    dev_msg: 'Failed to authenticate token.',\r\n                });\r\n            }\r\n        }\r\n\r\n        // decode token\r\n        if (token) {\r\n            // verifies secret and checks exp\r\n            jwt.verify(token, jwtdata.jwtSecretKey, function (err, decoded) {\r\n                if (err) {\r\n                    var statusCode = 401;\r\n                    return res.status(statusCode).json({\r\n                        user_msg: 'Failed to authenticate token.',\r\n                        dev_msg: 'Failed to authenticate token.',\r\n                    });\r\n                } else {\r\n                    // if everything is good, save to request for use in other routes\r\n                    if (decoded.user.role.toLowerCase() === \"admin\") {\r\n                        req.decoded = decoded;\r\n                        next();\r\n                    } else {\r\n                        var statusCode = 403;\r\n                        return res.status(statusCode).json({\r\n                            user_msg: 'UnAuthorized user.',\r\n                            dev_msg: 'UnAuthorized user.',\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // if there is no token\r\n            // return an error\r\n            var statusCode = 401;\r\n            return res.status(statusCode).json({\r\n                user_msg: 'No token provided.',\r\n                dev_msg: 'No token provided.',\r\n            });\r\n        }\r\n    },\r\n\r\n    validateAuthorizationUser: function (req, res, next) {\r\n        // check header or url parameters or post parameters for token\r\n        var authorizationHeader = req.headers['authorization'];\r\n        var token = '';\r\n        if (authorizationHeader) {\r\n            var headerParts = authorizationHeader.trim().split(' ');\r\n            if (headerParts[0].toLowerCase() === 'bearer') {\r\n                token = headerParts[headerParts.length - 1];\r\n            }\r\n            else {\r\n                var statusCode = 401;\r\n                return res.status(statusCode).json({\r\n                    user_msg: 'Failed to authenticate token.',\r\n                    dev_msg: 'Failed to authenticate token.',\r\n                });\r\n            }\r\n        }\r\n\r\n        // decode token\r\n        if (token) {\r\n            // verifies secret and checks exp\r\n            jwt.verify(token, jwtdata.jwtSecretKey, function (err, decoded) {\r\n                if (err) {\r\n                    var statusCode = 401;\r\n                    return res.status(statusCode).json({\r\n                        user_msg: 'Failed to authenticate token.',\r\n                        dev_msg: 'Failed to authenticate token.',\r\n                    });\r\n                } else {\r\n                    // if everything is good, save to request for use in other routes\r\n                    req.decoded = decoded;\r\n                    next();\r\n                }\r\n            });\r\n        } else {\r\n            // if there is no token\r\n            // return an error\r\n            var statusCode = 401;\r\n            return res.status(statusCode).json({\r\n                user_msg: 'No token provided.',\r\n                dev_msg: 'No token provided.',\r\n            });\r\n        }\r\n    },\r\n\r\n    registerValidate: {\r\n        body: {\r\n            first_name: Joi.string().regex(/^[a-zA-Z]{3,30}$/).required(),\r\n            last_name: Joi.string().regex(/^[a-zA-Z]{3,30}$/).required(),\r\n            mobile_number: Joi.string().regex(/^(\\+91[\\-\\s]?)?[0]?(91)?[789]\\d{9}$/).required(),\r\n            password: Joi.string().required(),\r\n            confirm_password: Joi.string().required().valid(Joi.ref('password')),\r\n            role: Joi.string().regex(/^[a-zA-Z]{3,30}$/).required(),\r\n            email_id: Joi.string().email({minDomainAtoms: 2})\r\n        }\r\n    },\r\n\r\n    deleteUserId: {\r\n        params: {\r\n            userId: Joi.string().required()\r\n        }\r\n    },\r\n\r\n    updateUser: {\r\n        body: {\r\n            first_name: Joi.string().regex(/^[a-zA-Z]{3,30}$/).required(),\r\n            last_name: Joi.string().regex(/^[a-zA-Z]{3,30}$/).required(),\r\n            mobile_number: Joi.string().regex(/^(\\+91[\\-\\s]?)?[0]?(91)?[789]\\d{9}$/).required(),\r\n            password: Joi.string().required(),\r\n            confirm_password: Joi.string().required().valid(Joi.ref('password')),\r\n            block: Joi.boolean().required(),\r\n        }\r\n    }\r\n\r\n\r\n};\r\n"]}