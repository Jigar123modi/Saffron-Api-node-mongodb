{"version":3,"sources":["config/Log.js"],"names":["require","Log","constructor","console","log","padRight","str","padString","length","logInit","logFormatter","options","level","toUpperCase","timestamp","message","meta","Date","format","filePath","logFile","Logger","transports","DailyRotateFile","dirname","filename","datePattern","maxsize","localTime","prepend","eLogLevel","silly","createTree","colorize","prettyPrint","json","formatter","writeLog","Level","uniqueId","error","warn","info","verbose","debug","module","exports"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AACAA,QAAQ,2BAAR;;IAEMC,G,GAAN,MAAMA,GAAN,CAAU;;AAEN;AAWAC,kBAAc;AACVC,gBAAQC,GAAR,CAAY,8BAAZ;AACH;;AAED,WAAOC,QAAP,CAAgBC,GAAhB,EAAqBC,SAArB,EAAgCC,MAAhC,EAAwC;AACpC,eAAOF,IAAIE,MAAJ,GAAaA,MAApB,EACIF,MAAMA,MAAMC,SAAZ;AACJ,eAAOD,GAAP;AACH;;AAED;AACA,WAAOG,OAAP,GAAiB;;AAEb,cAAMC,eAAe,SAAfA,YAAe,CAAUC,OAAV,EAAmB;AACpC;AACA,mBAAO,MAAMV,IAAII,QAAJ,CAAaM,QAAQC,KAAR,CAAcC,WAAd,EAAb,EAA0C,GAA1C,EAA+C,CAA/C,CAAN,GAA0D,IAA1D,GAAiEF,QAAQG,SAAR,EAAjE,GAAuF,KAAvF,IACFH,QAAQI,OAAR,GAAkBJ,QAAQI,OAA1B,GAAoC,EADlC,KAEFJ,QAAQK,IAAR,IAAgB,oBAAYL,QAAQK,IAApB,EAA0BR,MAA1C,GAAmD,SAAS,yBAAeG,QAAQK,IAAvB,CAA5D,GAA2F,EAFzF,CAAP;AAGH,SALD;;AAOA,cAAMF,YAAY,SAAZA,SAAY,GAAY;AAC1B,mBAAO,sBAAO,IAAIG,IAAJ,EAAP,EAAmBC,MAAnB,CAA0B,4BAA1B,CAAP;AACH,SAFD;;AAIA,YAAIC,WAAW,sBAAOC,OAAP,CAAeD,QAA9B;AACA,aAAKlB,GAAL,GAAW,IAAK,kBAAQoB,MAAb,CAAqB;AAC5BC,wBAAY,CACR,IAAK,kBAAQA,UAAR,CAAmBC,eAAxB,CAAyC;AACrCC,yBAASL,QAD4B;AAErCM,0BAAU,OAF2B;AAGrCC,6BAAa,cAHwB;AAIrCC,yBAAS,SAJ4B,EAIhB;AACrBC,2BAAW,IAL0B;AAMrCC,yBAAS,IAN4B;AAOrCjB,uBAAO,KAAKkB,SAAL,CAAeC,KAPe;AAQrCC,4BAAY,IARyB;AASrCC,0BAAU,IAT2B;AAUrCC,6BAAa,IAVwB;AAWrCC,sBAAM,KAX+B;AAYrCrB,2BAAWA,SAZ0B;AAarCsB,2BAAW1B;AAb0B,aAAzC,CADQ;AADgB,SAArB,CAAX;AAoBH;;AAED;AACA,WAAO2B,QAAP,CAAgBC,KAAhB,EAAuBvB,OAAvB,EAAgCwB,WAAW,IAA3C,EAAiD;AAC7C,YAAIA,QAAJ,EACI,KAAKtC,GAAL,CAASG,GAAT,CAAakC,KAAb,EAAoB,MAAMC,QAAN,GAAiB,IAAjB,GAAwBxB,OAA5C,EADJ,KAGI,KAAKd,GAAL,CAASG,GAAT,CAAakC,KAAb,EAAoBvB,OAApB;AACP;AAlEK,C;;AAqEV;;AArEMd,G,CAGK6B,S,GAAY;AACfU,WAAO,OADQ;AAEfC,UAAM,MAFS;AAGfC,UAAM,MAHS;AAIfC,aAAS,SAJM;AAKfC,WAAO,OALQ;AAMfb,WAAO;AANQ,C;AAmEvBc,OAAOC,OAAP,GAAiB7C,GAAjB","file":"Log.js","sourcesContent":["import moment from 'moment';\r\nimport winston from 'winston';\r\nimport config from '../config/environment'\r\nrequire('winston-daily-rotate-file');\r\n\r\nclass Log {\r\n\r\n    // { error: 0, warn: 1, info: 2, verbose: 3, debug: 4, silly: 5 }\r\n    static eLogLevel = {\r\n        error: 'error',\r\n        warn: 'warn',\r\n        info: 'info',\r\n        verbose: 'verbose',\r\n        debug: 'debug',\r\n        silly: 'silly'\r\n    };\r\n    static Log;\r\n\r\n    constructor() {\r\n        console.log('Log Successfully Initialized');\r\n    }\r\n\r\n    static padRight(str, padString, length) {\r\n        while (str.length < length)\r\n            str = str + padString;\r\n        return str;\r\n    }\r\n\r\n    /* Init stackify object and logger objects */\r\n    static logInit() {\r\n\r\n        const logFormatter = function (options) {\r\n            // Return string will be passed to logger.\r\n            return '[' + Log.padRight(options.level.toUpperCase(), ' ', 5) + '][' + options.timestamp() + ']- ' +\r\n                (options.message ? options.message : '') +\r\n                (options.meta && Object.keys(options.meta).length ? '\\n\\t' + JSON.stringify(options.meta) : '' );\r\n        };\r\n\r\n        const timestamp = function () {\r\n            return moment(new Date()).format('YYYY-MM-DD hh:mm:ss.SSSSSS');\r\n        };\r\n\r\n        let filePath = config.logFile.filePath;\r\n        this.Log = new (winston.Logger)({\r\n            transports: [\r\n                new (winston.transports.DailyRotateFile)({\r\n                    dirname: filePath,\r\n                    filename: './log',\r\n                    datePattern: 'yyyyMMdd-HH.',\r\n                    maxsize: '5242880',  //5MB\r\n                    localTime: true,\r\n                    prepend: true,\r\n                    level: this.eLogLevel.silly,\r\n                    createTree: true,\r\n                    colorize: true,\r\n                    prettyPrint: true,\r\n                    json: false,\r\n                    timestamp: timestamp,\r\n                    formatter: logFormatter\r\n                })\r\n            ]\r\n        });\r\n\r\n    }\r\n\r\n    /* Write log to file and/or stackify */\r\n    static writeLog(Level, message, uniqueId = null) {\r\n        if (uniqueId)\r\n            this.Log.log(Level, '[' + uniqueId + '] ' + message);\r\n        else\r\n            this.Log.log(Level, message);\r\n    }\r\n}\r\n\r\n// export the class\r\nmodule.exports = Log;\r\n"]}