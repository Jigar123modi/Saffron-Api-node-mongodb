{"version":3,"sources":["config/express.js"],"names":["app","env","get","use","static","join","root","set","engine","require","renderFile","urlencoded","extended","json","secret","secrets","session","saveUninitialized","resave","store","MongoStore","mongooseConnection","connection","db","process","SAUCE_USERNAME","csrf","xframe","hsts","maxAge","includeSubDomains","preload","xssProtection"],"mappings":"AAAA;;;;AAIA;;;;;;kBAkBe,UAASA,GAAT,EAAc;AACzB,QAAIC,MAAMD,IAAIE,GAAJ,CAAQ,KAAR,CAAV;;AAEA,QAAGD,QAAQ,aAAR,IAAyBA,QAAQ,MAApC,EAA4C;AACxCD,YAAIG,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,eAAKC,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACH;;AAED,QAAGL,QAAQ,YAAX,EAAyB;AACrBD,YAAIG,GAAJ,CAAQ,4BAAQ,eAAKE,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,QAAvB,EAAiC,aAAjC,CAAR,CAAR;AACH;;AAEDN,QAAIO,GAAJ,CAAQ,SAAR,EAAmB,eAAKF,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,QAAvB,CAAnB;AACAN,QAAIG,GAAJ,CAAQ,kBAAQC,MAAR,CAAeJ,IAAIE,GAAJ,CAAQ,SAAR,CAAf,CAAR;AACAF,QAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEAH,QAAIO,GAAJ,CAAQ,OAAR,EAAkB,GAAE,sBAAOD,IAAK,eAAhC;AACAN,QAAIQ,MAAJ,CAAW,MAAX,EAAmBC,QAAQ,KAAR,EAAeC,UAAlC;AACAV,QAAIO,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAP,QAAIG,GAAJ,CAAQ,4BAAR;AACAH,QAAIG,GAAJ,CAAQ,qBAAWQ,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAZ,QAAIG,GAAJ,CAAQ,qBAAWU,IAAX,EAAR;AACAb,QAAIG,GAAJ,CAAQ,+BAAR;AACAH,QAAIG,GAAJ,CAAQ,6BAAR;;AAGA;AACA;AACA;AACAH,QAAIG,GAAJ,CAAQ,8BAAQ;AACZW,gBAAQ,sBAAOC,OAAP,CAAeC,OADX;AAEZC,2BAAmB,IAFP;AAGZC,gBAAQ,KAHI;AAIZC,eAAO,IAAIC,UAAJ,CAAe;AAClBC,gCAAoB,mBAASC,UADX;AAElBC,gBAAI;AAFc,SAAf;AAJK,KAAR,CAAR;;AAUA;;;;AAIA,QAAGtB,QAAQ,MAAR,IAAkBA,QAAQ,aAA1B,IAA2C,CAACuB,QAAQvB,GAAR,CAAYwB,cAA3D,EAA2E;AAAE;AACzEzB,YAAIG,GAAJ,CAAQ,qBAAM;AACVuB,kBAAM,IADI;AAEVC,oBAAQ,YAFE;AAGVC,kBAAM;AACFC,wBAAQ,QADN,EACgB;AAClBC,mCAAmB,IAFjB;AAGFC,yBAAS;AAHP,aAHI;AAQVC,2BAAe;AARL,SAAN,CAAR;AAUH;;AAED,QAAG/B,QAAQ,aAAR,IAAyBA,QAAQ,MAApC,EAA4C;AACxCD,YAAIG,GAAJ,CAAQ,6BAAR,EADwC,CACf;AAC5B;AACJ,C;;AA1ED;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAIiB,aAAa,qDAAjB","file":"express.js","sourcesContent":["/**\r\n * Express configuration\r\n */\r\n\r\n'use strict';\r\n\r\nimport express from 'express';\r\nimport favicon from 'serve-favicon';\r\nimport morgan from 'morgan';\r\nimport compression from 'compression';\r\nimport bodyParser from 'body-parser';\r\nimport methodOverride from 'method-override';\r\nimport cookieParser from 'cookie-parser';\r\nimport errorHandler from 'errorhandler';\r\nimport path from 'path';\r\nimport lusca from 'lusca';\r\nimport config from './environment';\r\nimport session from 'express-session';\r\nimport connectMongo from 'connect-mongo';\r\nimport mongoose from 'mongoose';\r\nvar MongoStore = connectMongo(session);\r\n\r\nexport default function(app) {\r\n    var env = app.get('env');\r\n\r\n    if(env === 'development' || env === 'test') {\r\n        app.use(express.static(path.join(config.root, '.tmp')));\r\n    }\r\n\r\n    if(env === 'production') {\r\n        app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\r\n    }\r\n\r\n    app.set('appPath', path.join(config.root, 'client'));\r\n    app.use(express.static(app.get('appPath')));\r\n    app.use(morgan('dev'));\r\n\r\n    app.set('views', `${config.root}/server/views`);\r\n    app.engine('html', require('ejs').renderFile);\r\n    app.set('view engine', 'html');\r\n    app.use(compression());\r\n    app.use(bodyParser.urlencoded({ extended: false }));\r\n    app.use(bodyParser.json());\r\n    app.use(methodOverride());\r\n    app.use(cookieParser());\r\n\r\n\r\n    // Persist sessions with MongoStore / sequelizeStore\r\n    // We need to enable sessions for passport-twitter because it's an\r\n    // oauth 1.0 strategy, and Lusca depends on sessions\r\n    app.use(session({\r\n        secret: config.secrets.session,\r\n        saveUninitialized: true,\r\n        resave: false,\r\n        store: new MongoStore({\r\n            mongooseConnection: mongoose.connection,\r\n            db: 'mongodb-api-node'\r\n        })\r\n    }));\r\n\r\n    /**\r\n     * Lusca - express server security\r\n     * https://github.com/krakenjs/lusca\r\n     */\r\n    if(env !== 'test' && env !== 'development' && !process.env.SAUCE_USERNAME) { // eslint-disable-line no-process-env\r\n        app.use(lusca({\r\n            csrf: true,\r\n            xframe: 'SAMEORIGIN',\r\n            hsts: {\r\n                maxAge: 31536000, //1 year, in seconds\r\n                includeSubDomains: true,\r\n                preload: true\r\n            },\r\n            xssProtection: true\r\n        }));\r\n    }\r\n\r\n    if(env === 'development' || env === 'test') {\r\n        app.use(errorHandler()); // Error handler - has to be last\r\n    }\r\n}\r\n"]}